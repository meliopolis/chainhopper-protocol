// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.0;

import "lib/forge-std/src/Script.sol";
import "lib/forge-std/src/console.sol";
import {IAcrossMigrator} from "../src/interfaces/IAcrossMigrator.sol";

contract AcrossMigrationParamsDecoderScript is Script {
    bytes message1 =
        hex"00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000021050000000000000000000000002b4de52afb78a05d3d65fdc784143062ebfd813e00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000140000000000000000000000000dd1d28e5bedbd000a0539a3bf0ed558f4b721a840000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda0291300000000000000000000000000000000000000000000000000000000000001f4fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffcfa40fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd227c0000000000000000000000000000000000000000000000000047282d6a430d1500000000000000000000000000000000000000000000000000000000018a383f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    bytes message2 =
        hex"00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000021050000000000000000000000002b4de52afb78a05d3d65fdc784143062ebfd813e00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000140000000000000000000000000dd1d28e5bedbd000a0539a3bf0ed558f4b721a840000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda0291300000000000000000000000000000000000000000000000000000000000001f4fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffcfa40fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd227c00000000000000000000000000000000000000000000000000472fc377e26e98000000000000000000000000000000000000000000000000000000000189ca3d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000082af49447d8a07e3bd95bd0d56f35241523fbab10000000000000000000000004200000000000000000000000000000000000006000000000000000000000000000000000000000000000000000008c31252250800000000000000000000000000000000000000000000000000000000679bd2f70000000000000000000000000000000000000000000000000000000000000bb800000000000000000000000015652636f3898f550b257b89926d5566821c32e100000000000000000000000000000000000000000000000000000000679bd300";
    bytes message3 =
        hex"0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000002a00000000000000000000000000000000000000000000000000000000000002105000000000000000000000000691f0e6833362c9b96c0292bcd5ce74f46300786000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000140000000000000000000000000dd1d28e5bedbd000a0539a3bf0ed558f4b721a840000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda0291300000000000000000000000000000000000000000000000000000000000001f4fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffcfa40fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd155200000000000000000000000000000000000000000000000000618764fb3bbc8b0000000000000000000000000000000000000000000000000000000000f2689600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000082af49447d8a07e3bd95bd0d56f35241523fbab1000000000000000000000000420000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000e7f08aa7dbe0000000000000000000000000000000000000000000000000000000067a01b600000000000000000000000000000000000000000000000000000000000000bb800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

    function decodeAndPrintAcrossMigrationParams(bytes memory message) public {
        IAcrossMigrator.AcrossMigrationParams memory migrationParams =
            abi.decode(message, (IAcrossMigrator.AcrossMigrationParams));
        console.log(migrationParams.baseParams.destinationChainId);
        console.log(migrationParams.baseParams.recipient);
        console.logBytes(migrationParams.baseParams.settlementParams);
        IAcrossMigrator.AcrossRoute[] memory routes = migrationParams.acrossRoutes;
        for (uint256 i = 0; i < routes.length; i++) {
            console.log(routes[i].inputToken);
            console.log(routes[i].outputToken);
            console.log(routes[i].maxFees);
            console.log(routes[i].quoteTimestamp);
            console.log(routes[i].fillDeadlineOffset);
            console.log(routes[i].exclusiveRelayer);
            console.log(routes[i].exclusivityDeadline);
        }
    }

    function run() public {
        decodeAndPrintAcrossMigrationParams(message3);
    }

    function test() public {}
}
